(window.webpackJsonp=window.webpackJsonp||[]).push([[47,3],{0:function(s,n,a){"use strict";a.d(n,"a",(function(){return t}));var e=a(3);const o={};class t extends e.Component{constructor(s){super(s),this.defaultComponents=o}get components(){const s=this.customComponents||{};return Object.assign(s,this.defaultComponents)}set components(s){this.customComponents=s}}},117:function(s,n,a){var e=a(1),o=a(65),t=a(19).default;s.exports=a(19),s.exports.default=e(t,o,[])},19:function(s,n,a){"use strict";a.r(n),function(s){a.d(n,"default",(function(){return l}));var e,o,t,p=a(0);class l extends p.a{inited(){s.hub&&s.hub.fire&&s.hub.fire("changed",{level:0,children:[{level:2,title:"browserslist",hash:"browserslist"},{level:2,title:"Polyfill",hash:"polyfill",children:[{level:3,title:"个性化配置",hash:"%E4%B8%AA%E6%80%A7%E5%8C%96%E9%85%8D%E7%BD%AE"}]}]})}}t={},(o="components")in(e=l)?Object.defineProperty(e,o,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[o]=t}.call(this,a(2))},65:function(s,n){s.exports=' <div class="content markdown-content"><div class="markdown"><h1 id="%E6%B5%8F%E8%A7%88%E5%99%A8%E5%85%BC%E5%AE%B9%E6%80%A7">浏览器兼容性</h1> <h2 id="browserslist">browserslist</h2> <p>用户可以通过项目中的 <code>package.json</code> 中 <code>browserslist</code> 字段（或 <code>.browserslistrc</code> 文件）来指定项目的目标浏览器的范围。这个配置会被 <code>@babel/preset-env</code> 和 <code>Autoprefixer</code> 用来确定需要转译的 JavaScript 特性和需要添加的 CSS 浏览器前缀（<a href="https://github.com/browserslist/browserslist" target="_blank">了解更多</a>）。</p> <h2 id="polyfill">Polyfill</h2> <p>Polyfill 是指一段 JS 代码，它提供了开发者希望浏览器能够原生提供的技术，目标是打平开发环境和用户浏览器之间的 API 兼容性差异。</p> <p>在 San CLI 中通过 @babel/preset-env 和 browserslist 配置来决定项目需要的 polyfill。</p> <p>默认情况下，我们会把 <code>useBuiltIns: \'usage\'</code> 传递给 <code>@babel/preset-env</code>，这样它会根据源代码中出现的语言特性自动检测需要的 polyfill，这确保了最终包里 polyfill 数量的最小化。</p> <h3 id="%E4%B8%AA%E6%80%A7%E5%8C%96%E9%85%8D%E7%BD%AE">个性化配置</h3> <ol> <li>使用 <code>exclude</code> 参数来去掉不需要的 polyfill；</li> </ol> <pre class="language-js"><code class="language-js">module<span class="token punctuation">.</span>export <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token comment">// ...</span>\n    loaderOptions<span class="token operator">:</span> <span class="token punctuation">{</span>\n        babel<span class="token operator">:</span> <span class="token punctuation">{</span>\n            exclude<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'es.promise\'</span><span class="token punctuation">]</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token comment">// ...</span>\n<span class="token punctuation">}</span></code></pre> <ol start="2"> <li>通过 <code>polyfills</code> 参数强制引入 polyfill（主要解决自动添加的情况存在的一些兼容性问题）；</li> </ol> <pre class="language-js"><code class="language-js">module<span class="token punctuation">.</span>export <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token comment">// ...</span>\n    loaderOptions<span class="token operator">:</span> <span class="token punctuation">{</span>\n        babel<span class="token operator">:</span> <span class="token punctuation">{</span>\n            polyfills<span class="token operator">:</span> <span class="token punctuation">[</span>\n                <span class="token string">\'es.promise\'</span><span class="token punctuation">,</span>\n                <span class="token comment">// #2012 es7.promise replaces native Promise in FF and causes missing finally</span>\n                <span class="token string">\'es.promise.finally\'</span><span class="token punctuation">,</span>\n                <span class="token comment">// Promise polyfill alone doesn\'t work in IE</span>\n                <span class="token string">\'es.array.iterator\'</span>\n            <span class="token punctuation">]</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token comment">// ...</span>\n<span class="token punctuation">}</span></code></pre> <ol start="3"> <li>禁用内置 polyfill 配置，即不使用 san-cli 提供的 presets，babel-loader 会自动寻找项目目录下的 babel 配置文件（<code>.babelrc</code> &gt; <code>babel.config.js</code>）：</li> </ol> <pre class="language-js"><code class="language-js">module<span class="token punctuation">.</span>export <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token comment">// ...</span>\n    loaderOptions<span class="token operator">:</span> <span class="token punctuation">{</span>\n        babel<span class="token operator">:</span> <span class="token boolean">false</span>\n    <span class="token comment">// ...</span>\n<span class="token punctuation">}</span></code></pre> </div></div> '}}]);