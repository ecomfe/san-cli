!function(e){function n(n){for(var o,s,c=n[0],l=n[1],i=n[2],u=0,d=[];u<c.length;u++)s=c[u],Object.prototype.hasOwnProperty.call(r,s)&&r[s]&&d.push(r[s][0]),r[s]=0;for(o in l)Object.prototype.hasOwnProperty.call(l,o)&&(e[o]=l[o]);for(p&&p(n);d.length;)d.shift()();return a.push.apply(a,i||[]),t()}function t(){for(var e,n=0;n<a.length;n++){for(var t=a[n],o=!0,c=1;c<t.length;c++){var l=t[c];0!==r[l]&&(o=!1)}o&&(a.splice(n--,1),e=s(s.s=t[0]))}return e}var o={},r={7:0,48:0},a=[];function s(n){if(o[n])return o[n].exports;var t=o[n]={i:n,l:!1,exports:{}};return e[n].call(t.exports,t,t.exports,s),t.l=!0,t.exports}s.e=function(){return Promise.resolve()},s.m=e,s.c=o,s.d=function(e,n,t){s.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:t})},s.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},s.t=function(e,n){if(1&n&&(e=s(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var t=Object.create(null);if(s.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var o in e)s.d(t,o,function(n){return e[n]}.bind(null,o));return t},s.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return s.d(n,"a",n),n},s.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},s.p="/san-cli/";var c=window.webpackJsonp=window.webpackJsonp||[],l=c.push.bind(c);c.push=n,c=c.slice();for(var i=0;i<c.length;i++)n(c[i]);var p=l;a.push([120,0]),t()}({120:function(e,n,t){var o=t(1),r=t(69),a=t(22).default;e.exports=t(22),e.exports.default=o(a,r,[])},22:function(e,n,t){"use strict";t.r(n),function(e){t.d(n,"default",(function(){return c}));var o,r,a,s=t(0);class c extends s.a{inited(){e.hub&&e.hub.fire&&e.hub.fire("changed",{level:0,children:[{level:2,title:"组件开发",hash:"%E7%BB%84%E4%BB%B6%E5%BC%80%E5%8F%91"}]})}}a={},(r="components")in(o=c)?Object.defineProperty(o,r,{value:a,enumerable:!0,configurable:!0,writable:!0}):o[r]=a}.call(this,t(2))},69:function(e,n){e.exports=' <div class="content markdown-content"><div class="markdown"><h1 id="san-component-%E7%BB%84%E4%BB%B6%E5%BC%80%E5%8F%91">San Component 组件开发</h1> <blockquote> <p>组件要求是不涉及具体业务的逻辑、粒度合理的单元。</p> </blockquote> <p>一般来讲，组件分为项目公共组件、全局组件和页面的组件三类。</p> <ul> <li>公共组件：通过 npm 维护，项目使用<code>package.json</code>引入</li> <li>全局组件：放在<code>src/components/</code>下面维护，主要是全局性的，或通用性很强的组件，具备良好的封装性</li> <li>页面的组件：放在<code>src/pages/*/components</code>下面维护，仅限某个页面内使用</li> </ul> <div class="warning"> <p>百度公司内部更加详细的组件开发规范或者开发 Nano 组件，请参考 <a href="http://hulk.baidu-int.com/docs/nano" target="_blank">Nano 组件库</a>规范！</p> </div> <h2 id="%E7%BB%84%E4%BB%B6%E5%BC%80%E5%8F%91">组件开发</h2> <p>可以将自己团队的组件规范对应的组件目录结构<a href="/san-cli/create-scaffold/">创建一个脚手架</a>，然后使用 San CLI 的<code>init</code>命令在对应的组件路径中创建一个组件项目结构：</p> <pre class="language-bash"><code class="language-bash">san init <span class="token operator">&lt;</span>component-scaffold<span class="token operator">></span> <span class="token operator">&lt;</span>folder-name<span class="token operator">></span></code></pre> <p>例如我们的组件目录结构如下：</p> <pre class="language-text"><code class="language-text">├── README.md          # 组件介绍\n├── __tests__          # 测试相关\n│   └── index.spec.js\n├── docs               # 文档相关\n│   ├── basic.md\n│   └── index.js\n├── index.js\n├── package.json\n└── style\n    └── index.less</code></pre> </div></div> '}});