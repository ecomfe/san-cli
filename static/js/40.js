(window.webpackJsonp=window.webpackJsonp||[]).push([[40,5],{0:function(e,t,n){"use strict";n.d(t,"a",(function(){return s}));var a=n(3);const o={};class s extends a.Component{constructor(e){super(e),this.defaultComponents=o}get components(){const e=this.customComponents||{};return Object.assign(e,this.defaultComponents)}set components(e){this.customComponents=e}}},119:function(e,t,n){var a=n(1),o=n(67),s=n(21).default;e.exports=n(21),e.exports.default=a(s,o,[])},21:function(e,t,n){"use strict";n.r(t),function(e){n.d(t,"default",(function(){return l}));var a,o,s,c=n(0);class l extends c.a{inited(){e.hub&&e.hub.fire&&e.hub.fire("changed",{level:0,children:[{level:2,title:"分析结果",hash:"%E5%88%86%E6%9E%90%E7%BB%93%E6%9E%9C"},{level:2,title:"打包性能分析",hash:"%E6%89%93%E5%8C%85%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90"}]})}}s={},(o="components")in(a=l)?Object.defineProperty(a,o,{value:s,enumerable:!0,configurable:!0,writable:!0}):a[o]=s}.call(this,n(2))},4:function(e,t,n){"use strict";e.exports=function(e,t){return t||(t={}),"string"!=typeof(e=e&&e.__esModule?e.default:e)?e:(t.hash&&(e+=t.hash),t.maybeNeedQuotes&&/[\t\n\f\r "'=<>`]/.test(e)?'"'.concat(e,'"'):e)}},67:function(e,t,n){var a=' <div class="content markdown-content"><div class="markdown"><h1 id="bundle-%E5%88%86%E6%9E%90">Bundle 分析</h1> <p>很多团队在使用 Webpack 的时候，不注意关注打包后的性能问题，而使用<a href="https://github.com/webpack-contrib/webpack-bundle-analyzer/" target="_blank">webpack-bundle-analyzer</a>可以帮忙排查打包不合理的情况，一般会遇见下面的问题：</p> <ol> <li>打入不必要的包，引入过多的内容，比如<code>lodash</code>，需要使用<code>lodash</code> babel 插件来解决；</li> <li>打包优先级错误，导致本来不需提前引入的包，可以使用动态加载的方式来引入；</li> <li>多页面情况下没有拆包，每个页面一个包，这种情况可以使用<code>spiltChunks</code>来进行拆包，将公共内容拆成一个包。</li> </ol> <p>San CLI 内置了<a href="https://github.com/webpack-contrib/webpack-bundle-analyzer/" target="_blank">webpack-bundle-analyzer</a>，使用方便，只需要在执行<code>san build</code>时加上<code>--analyze</code></p> <p><img src="https://cloud.githubusercontent.com/assets/302213/20628702/93f72404-b338-11e6-92d4-9a365550a701.gif" alt=""/></p> <h2 id="%E5%88%86%E6%9E%90%E7%BB%93%E6%9E%9C">分析结果</h2> <p>除了直接使用 webpack-bundle-analyzer 查看 Bundle 结果，还可以将结果保存下来，用于分析和比较两次打包的结果，查看是否打包合理，San CLI 的 build 使用下面的两个参数来将分析结果进行保存：</p> <ul> <li><code>--stats-json，--stats</code>：生成 Webpack stats JSON 文件到 stats.json</li> <li><code>--report</code>：将包分析报表生成为单个 HTML 文件</li> </ul> <p>关于 Bundle 结果的分析可以查看<a href="https://survivejs.com/webpack/optimizing/build-analysis/" target="_blank">这篇文章</a>，介绍了很多 Bundle 分析工具。这些工具的使用方法都是将生成的 JSON 文件上传上去，然后分析，这里就不再赘述了。</p> <h2 id="%E6%89%93%E5%8C%85%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90">打包性能分析</h2> <p>如果需要排查 loader 或者 plugin 的性能问题，可以使用 <code>san build --profile</code>，然后打包时会出现对应的性能表格。</p> <p><img src="'+n(4)(n(68))+'" alt=""/></p> </div></div> ';e.exports=a},68:function(e,t,n){"use strict";n.r(t),t.default=n.p+"static/img/profile.png"}}]);