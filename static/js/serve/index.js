!function(e){function n(n){for(var r,a,i=n[0],c=n[1],s=n[2],d=0,f=[];d<i.length;d++)a=i[d],Object.prototype.hasOwnProperty.call(o,a)&&o[a]&&f.push(o[a][0]),o[a]=0;for(r in c)Object.prototype.hasOwnProperty.call(c,r)&&(e[r]=c[r]);for(u&&u(n);f.length;)f.shift()();return l.push.apply(l,s||[]),t()}function t(){for(var e,n=0;n<l.length;n++){for(var t=l[n],r=!0,i=1;i<t.length;i++){var c=t[i];0!==o[c]&&(r=!1)}r&&(l.splice(n--,1),e=a(a.s=t[0]))}return e}var r={},o={18:0,59:0},l=[];function a(n){if(r[n])return r[n].exports;var t=r[n]={i:n,l:!1,exports:{}};return e[n].call(t.exports,t,t.exports,a),t.l=!0,t.exports}a.e=function(){return Promise.resolve()},a.m=e,a.c=r,a.d=function(e,n,t){a.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:t})},a.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},a.t=function(e,n){if(1&n&&(e=a(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var t=Object.create(null);if(a.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var r in e)a.d(t,r,function(n){return e[n]}.bind(null,r));return t},a.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return a.d(n,"a",n),n},a.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},a.p="/san-cli/";var i=window.webpackJsonp=window.webpackJsonp||[],c=i.push.bind(i);i.push=n,i=i.slice();for(var s=0;s<i.length;s++)n(i[s]);var u=c;l.push([113,0]),t()}({113:function(e,n,t){var r=t(1),o=t(60),l=t(14).default;e.exports=t(14),e.exports.default=r(l,o,[])},14:function(e,n,t){"use strict";t.r(n),function(e){t.d(n,"default",(function(){return i}));var r,o,l,a=t(0);class i extends a.a{inited(){e.hub&&e.hub.fire&&e.hub.fire("changed",{level:0,children:[{level:2,title:"使用命令",hash:"%E4%BD%BF%E7%94%A8%E5%91%BD%E4%BB%A4"},{level:2,title:"参数说明",hash:"%E5%8F%82%E6%95%B0%E8%AF%B4%E6%98%8E"}]})}}l={},(o="components")in(r=i)?Object.defineProperty(r,o,{value:l,enumerable:!0,configurable:!0,writable:!0}):r[o]=l}.call(this,t(2))},60:function(e,n){e.exports=' <div class="content"><div class="markdown"><h1 id="%E5%BC%80%E5%8F%91%E6%89%93%E5%8C%85"><a class="header-anchor" href="#%E5%BC%80%E5%8F%91%E6%89%93%E5%8C%85">#</a> 开发打包</h1> <p><code>san serve</code>是开发环境打包，下面详细说下用法。</p> <h2 id="%E4%BD%BF%E7%94%A8%E5%91%BD%E4%BB%A4"><a class="header-anchor" href="#%E4%BD%BF%E7%94%A8%E5%91%BD%E4%BB%A4">#</a> 使用命令</h2> <pre class="language-bash"><code class="language-bash">san serve <span class="token punctuation">[</span>entry<span class="token punctuation">]</span></code></pre> <ul> <li>entry：入口文件，用于编译单一文件，不传入，则从当前<a href="https://zh.wikipedia.org/wiki/%E5%B7%A5%E4%BD%9C%E7%9B%AE%E9%8C%84" target="_blank">工作目录</a>，读取 Config 文件的 pages 配置项</li> </ul> <h2 id="%E5%8F%82%E6%95%B0%E8%AF%B4%E6%98%8E"><a class="header-anchor" href="#%E5%8F%82%E6%95%B0%E8%AF%B4%E6%98%8E">#</a> 参数说明</h2> <ul> <li><code>--port，--p</code>：指定 devServer 端口号，默认为 8899</li> <li><code>--use-https</code>： 请求头是否使用 https，默认为 false</li> <li><code>--host，--H</code>：指定 devServer 域名，默认为 0.0.0.0</li> <li><code>--public</code>：指定 HMR client 的 URL，默认http://localhost:8899/sockjs-node</li> <li><code>--open，--O</code>：是否在编译打包完成后，自动在浏览器中打开页面地址，值为 true 或 false，默认是 false</li> <li><code>--qrcode</code>：是否输出页面地址二维码，值为 true 或 false，默认是 true</li> <li><code>--mode，--m</code>：环境指示，值为 development 或 production，默认是 development</li> <li><code>--config，--config-file</code>：指定 san config 内容，值为 san config 文件的地址，默认会从目录中找寻 san.config.js 文件</li> </ul> </div></div> '}});