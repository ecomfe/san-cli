!function(e){function l(l){for(var t,r,a=l[0],s=l[1],d=l[2],u=0,p=[];u<a.length;u++)r=a[u],Object.prototype.hasOwnProperty.call(n,r)&&n[r]&&p.push(n[r][0]),n[r]=0;for(t in s)Object.prototype.hasOwnProperty.call(s,t)&&(e[t]=s[t]);for(c&&c(l);p.length;)p.shift()();return i.push.apply(i,d||[]),o()}function o(){for(var e,l=0;l<i.length;l++){for(var o=i[l],t=!0,a=1;a<o.length;a++){var s=o[a];0!==n[s]&&(t=!1)}t&&(i.splice(l--,1),e=r(r.s=o[0]))}return e}var t={},n={17:0},i=[];function r(l){if(t[l])return t[l].exports;var o=t[l]={i:l,l:!1,exports:{}};return e[l].call(o.exports,o,o.exports,r),o.l=!0,o.exports}r.e=function(){return Promise.resolve()},r.m=e,r.c=t,r.d=function(e,l,o){r.o(e,l)||Object.defineProperty(e,l,{enumerable:!0,get:o})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,l){if(1&l&&(e=r(e)),8&l)return e;if(4&l&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(r.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&l&&"string"!=typeof e)for(var t in e)r.d(o,t,function(l){return e[l]}.bind(null,t));return o},r.n=function(e){var l=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(l,"a",l),l},r.o=function(e,l){return Object.prototype.hasOwnProperty.call(e,l)},r.p="/san-cli/";var a=window.webpackJsonp=window.webpackJsonp||[],s=a.push.bind(a);a.push=l,a=a.slice();for(var d=0;d<a.length;d++)l(a[d]);var c=s;i.push([112,0]),o()}({112:function(e,l,o){var t=o(1),n=o(59),i=o(14).default;e.exports=o(14),e.exports.default=t(i,n,[])},14:function(e,l,o){"use strict";o.r(l),function(e){o.d(l,"default",(function(){return a}));var t,n,i,r=o(0);class a extends r.a{inited(){e.hub&&e.hub.fire&&e.hub.fire("changed",{level:0,children:[{level:2,title:"使用命令",hash:"%E4%BD%BF%E7%94%A8%E5%91%BD%E4%BB%A4"},{level:2,title:"参数说明",hash:"%E5%8F%82%E6%95%B0%E8%AF%B4%E6%98%8E",children:[{level:3,title:"配置相关",hash:"%E9%85%8D%E7%BD%AE%E7%9B%B8%E5%85%B3"},{level:3,title:"报告和日志相关",hash:"%E6%8A%A5%E5%91%8A%E5%92%8C%E6%97%A5%E5%BF%97%E7%9B%B8%E5%85%B3"},{level:3,title:"其他",hash:"%E5%85%B6%E4%BB%96"},{level:3,title:"基于ESM的本地构建",hash:"%E5%9F%BA%E4%BA%8Eesm%E7%9A%84%E6%9C%AC%E5%9C%B0%E6%9E%84%E5%BB%BA"}]}]})}}i={},(n="components")in(t=a)?Object.defineProperty(t,n,{value:i,enumerable:!0,configurable:!0,writable:!0}):t[n]=i}.call(this,o(2))},59:function(e,l){e.exports=' <div class="content markdown-content"><div class="markdown"><h1 id="%E5%BC%80%E5%8F%91%E6%89%93%E5%8C%85">开发打包</h1> <p><code>san serve</code>是开发环境打包，下面详细说下用法。</p> <h2 id="%E4%BD%BF%E7%94%A8%E5%91%BD%E4%BB%A4">使用命令</h2> <pre class="language-bash"><code class="language-bash">san serve <span class="token punctuation">[</span>entry<span class="token punctuation">]</span></code></pre> <ul> <li>entry：入口文件，用于编译单一文件，不传入，则从当前<a href="https://zh.wikipedia.org/wiki/%E5%B7%A5%E4%BD%9C%E7%9B%AE%E9%8C%84" target="_blank">工作目录</a>，读取 Config 文件的 pages 配置项</li> </ul> <h2 id="%E5%8F%82%E6%95%B0%E8%AF%B4%E6%98%8E">参数说明</h2> <h3 id="%E9%85%8D%E7%BD%AE%E7%9B%B8%E5%85%B3">配置相关</h3> <ul> <li><code>--mode，--m</code>：环境指示，值为 development 或 production，默认是 development</li> <li><code>--config，--config-file</code>：指定 san config 内容，值为 san config 文件的地址，默认会从当前目录寻找 san.config.js 文件</li> <li><code>--port，--p</code>：指定 devServer 端口号，默认为 8899</li> <li><code>--host，--H</code>：指定 devServer 域名，默认为 0.0.0.0</li> <li><code>--https</code>：启用 https，值为 true 或 false，默认是 false</li> <li><code>--public</code>：指定 HMR client 的 URL，默认为 http://localhost:8899/sockjs-node</li> </ul> <h3 id="%E6%8A%A5%E5%91%8A%E5%92%8C%E6%97%A5%E5%BF%97%E7%9B%B8%E5%85%B3">报告和日志相关</h3> <ul> <li><code>--profile，--profiler</code>：是否展示编译进度日志，值为 true 或 false，默认是 false</li> </ul> <h3 id="%E5%85%B6%E4%BB%96">其他</h3> <ul> <li><code>--no-progress</code>：禁用默认的进度条（webpackbar）值为 true 或 false，默认是 false</li> <li><code>--open，--O</code>：是否在编译打包完成后，自动在浏览器中打开页面地址，值为 true 或 false，默认是 false</li> <li><code>--qrcode</code>：是否输出页面地址二维码，值为 true 或 false，默认是 true</li> <li><code>--esm</code>：是否开启 esmodule 打包以加速本地调试的启动速度，开启后会使用 esbuild-loader 替换 babel-loader，默认是 false</li> </ul> <h3 id="%E5%9F%BA%E4%BA%8Eesm%E7%9A%84%E6%9C%AC%E5%9C%B0%E6%9E%84%E5%BB%BA">基于ESM的本地构建</h3> <p>执行<code>san serve --esm</code>即可开启基于ESM的本地构建加速，我们从以下几个方面来了解：</p> <ol> <li>本地调试的场景项目在进行本地调试时，最主要的目的是功能的快速查看和验证，尤其在大型的项目中，本地构建的速度会对开发效率产生较大影响。实际情况中，开发者的本地浏览器多数版本较新，能够很好的支持 js 的 esnext 版本，那么，通过 babel 的 pollyfill 实现的 ES5 代码的转换完全可以省略；另一方面面向 esnext 构建，也可进一步尝试更快的转换工具 <code>esbuild-loader</code>，提升js的解析速度，<code>san serve --esm</code> 命令即从以上两方面出发，通过 esbuild-loader 指定构建 esnext 版本 bundle，提升本地构建效率。</li> <li>加速的原理以及实际的效果 <a href="https://github.com/evanw/esbuild" target="_blank">esbuild</a> 是基于go语言实现的 JavaScript 打包工具，其打包速度相较于 webpack 有近百倍的提升，两者的实现原理并不相同，因此我们仅利用 esbuild 加速 js 的转换。开启 <code>esm</code> 项后，会将 <code>babel-loader</code> 替换为 <a href="https://www.npmjs.com/package/esbuild-loader" target="_blank"><code>esbuild-loader</code></a>，默认构建 target 指定为 <strong>es2015</strong>。通过对 San CLI 的默认 demo 进行测试，开启 esm 构建后，本地调试速度提升 30%+（1440ms -&gt; 969ms）。</li> <li>为什么不在生产环境使用？</li> </ol> <ul> <li>js 转换：在实际的项目中，通常需要对不支持 ES6 浏览器进行兼容，但 esbuild 仅支持构建 ES6 及以上版本，因此在生产环境中，仍使用 babel 进行转换。</li> <li>js 压缩：<code>esbuild-loader</code> 提供了生产环境对 js 进行压缩的插件 <code>ESBuildMinifyPlugin</code>，经 demo 测试，对比默认的 <code>terser-webpack-plugin</code>，其压缩速度提升30%，压缩后 bundle 体积略有增加。</li> </ul> <p>综上，在 San CLI 的开发环境中，通过指定 esm 即可快速开启 esbuild 加速本地构建，而在生产环境中，仅支持 esbuild 提供的压缩能力，默认不开启，可通过 <code>loaderOptions.esbuild</code> 的配置选择开启，<a href="https://ecomfe.github.io/san-cli/advanced/#loaderoptions.esbuild" target="_blank">配置详见</a></p> </div></div> '}});