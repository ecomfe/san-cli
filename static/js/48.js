(window.webpackJsonp=window.webpackJsonp||[]).push([[48,7],{0:function(n,e,s){"use strict";s.d(e,"a",(function(){return a}));var o=s(3);const t={};class a extends o.Component{constructor(n){super(n),this.defaultComponents=t}get components(){const n=this.customComponents||{};return Object.assign(n,this.defaultComponents)}set components(n){this.customComponents=n}}},120:function(n,e,s){var o=s(1),t=s(69),a=s(22).default;n.exports=s(22),n.exports.default=o(a,t,[])},22:function(n,e,s){"use strict";s.r(e),function(n){s.d(e,"default",(function(){return p}));var o,t,a,c=s(0);class p extends c.a{inited(){n.hub&&n.hub.fire&&n.hub.fire("changed",{level:0,children:[{level:2,title:"组件开发",hash:"%E7%BB%84%E4%BB%B6%E5%BC%80%E5%8F%91"}]})}}a={},(t="components")in(o=p)?Object.defineProperty(o,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):o[t]=a}.call(this,s(2))},69:function(n,e){n.exports=' <div class="content markdown-content"><div class="markdown"><h1 id="san-component-%E7%BB%84%E4%BB%B6%E5%BC%80%E5%8F%91">San Component 组件开发</h1> <blockquote> <p>组件要求是不涉及具体业务的逻辑、粒度合理的单元。</p> </blockquote> <p>一般来讲，组件分为项目公共组件、全局组件和页面的组件三类。</p> <ul> <li>公共组件：通过 npm 维护，项目使用<code>package.json</code>引入</li> <li>全局组件：放在<code>src/components/</code>下面维护，主要是全局性的，或通用性很强的组件，具备良好的封装性</li> <li>页面的组件：放在<code>src/pages/*/components</code>下面维护，仅限某个页面内使用</li> </ul> <div class="warning"> <p>百度公司内部更加详细的组件开发规范或者开发 Nano 组件，请参考 <a href="http://hulk.baidu-int.com/docs/nano" target="_blank">Nano 组件库</a>规范！</p> </div> <h2 id="%E7%BB%84%E4%BB%B6%E5%BC%80%E5%8F%91">组件开发</h2> <p>可以将自己团队的组件规范对应的组件目录结构<a href="/san-cli/create-scaffold/">创建一个脚手架</a>，然后使用 San CLI 的<code>init</code>命令在对应的组件路径中创建一个组件项目结构：</p> <pre class="language-bash"><code class="language-bash">san init <span class="token operator">&lt;</span>component-scaffold<span class="token operator">></span> <span class="token operator">&lt;</span>folder-name<span class="token operator">></span></code></pre> <p>例如我们的组件目录结构如下：</p> <pre class="language-text"><code class="language-text">├── README.md          # 组件介绍\n├── __tests__          # 测试相关\n│   └── index.spec.js\n├── docs               # 文档相关\n│   ├── basic.md\n│   └── index.js\n├── index.js\n├── package.json\n└── style\n    └── index.less</code></pre> </div></div> '}}]);