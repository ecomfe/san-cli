!function(n){function s(s){for(var t,e,c=s[0],l=s[1],i=s[2],r=0,d=[];r<c.length;r++)e=c[r],Object.prototype.hasOwnProperty.call(p,e)&&p[e]&&d.push(p[e][0]),p[e]=0;for(t in l)Object.prototype.hasOwnProperty.call(l,t)&&(n[t]=l[t]);for(u&&u(s);d.length;)d.shift()();return o.push.apply(o,i||[]),a()}function a(){for(var n,s=0;s<o.length;s++){for(var a=o[s],t=!0,c=1;c<a.length;c++){var l=a[c];0!==p[l]&&(t=!1)}t&&(o.splice(s--,1),n=e(e.s=a[0]))}return n}var t={},p={28:0,65:0},o=[];function e(s){if(t[s])return t[s].exports;var a=t[s]={i:s,l:!1,exports:{}};return n[s].call(a.exports,a,a.exports,e),a.l=!0,a.exports}e.e=function(){return Promise.resolve()},e.m=n,e.c=t,e.d=function(n,s,a){e.o(n,s)||Object.defineProperty(n,s,{enumerable:!0,get:a})},e.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},e.t=function(n,s){if(1&s&&(n=e(n)),8&s)return n;if(4&s&&"object"==typeof n&&n&&n.__esModule)return n;var a=Object.create(null);if(e.r(a),Object.defineProperty(a,"default",{enumerable:!0,value:n}),2&s&&"string"!=typeof n)for(var t in n)e.d(a,t,function(s){return n[s]}.bind(null,t));return a},e.n=function(n){var s=n&&n.__esModule?function(){return n.default}:function(){return n};return e.d(s,"a",s),s},e.o=function(n,s){return Object.prototype.hasOwnProperty.call(n,s)},e.p="/san-cli/";var c=window.webpackJsonp=window.webpackJsonp||[],l=c.push.bind(c);c.push=s,c=c.slice();for(var i=0;i<c.length;i++)s(c[i]);var u=l;o.push([138,0]),a()}({104:function(n,s){n.exports=' <div class="content"><div class="markdown"><h1 id="%E6%8F%92%E4%BB%B6%E5%AF%B9%E8%B1%A1"><a class="header-anchor" href="#%E6%8F%92%E4%BB%B6%E5%AF%B9%E8%B1%A1">#</a> 插件对象</h1> <h2 id="pluginmanager%E5%AF%B9%E8%B1%A1"><a class="header-anchor" href="#pluginmanager%E5%AF%B9%E8%B1%A1">#</a> PluginManager对象</h2> <p>PluginManager是整个<code>San CLI UI</code>插件系统的基础，该对象的方法按照功能可分为四类。</p> <blockquote> <p>上文提到，在<code>San CLI UI</code>加载依赖时，会尝试读取依赖包内的ui.js文件，并将PluginManager对象的实例api注入其中，因此以下插件的使用均基于api来调用。</p> </blockquote> <h3 id="1.-%E6%8F%92%E4%BB%B6%E5%8A%A0%E8%BD%BD%E5%8F%8A%E5%AE%9A%E4%B9%89"><a class="header-anchor" href="#1.-%E6%8F%92%E4%BB%B6%E5%8A%A0%E8%BD%BD%E5%8F%8A%E5%AE%9A%E4%B9%89">#</a> 1. 插件加载及定义</h3> <h4 id="%E6%8F%92%E4%BB%B6%E5%8A%A0%E8%BD%BD"><a class="header-anchor" href="#%E6%8F%92%E4%BB%B6%E5%8A%A0%E8%BD%BD">#</a> 插件加载</h4> <p>通过<code>api.registerAddon</code>函数，开发者可以为自定义的组件指定id及加载路径（在npm包内的ui.js中），<code>San CLI UI</code>在插件加载时，会尝试从开发者指定的路径下加载插件定义，从而集成到<code>San CLI UI</code>对应位置。</p> <h5 id="api-%E8%AF%B4%E6%98%8E"><a class="header-anchor" href="#api-%E8%AF%B4%E6%98%8E">#</a> API 说明</h5> <p><strong>registerAddon</strong></p> <table> <thead> <tr> <th>参数</th> <th>说明</th> <th>类型</th> <th>默认值</th> </tr> </thead> <tbody> <tr> <td>id</td> <td>插件唯一id</td> <td>string</td> <td>无</td> </tr> <tr> <td>url</td> <td>可选，开发模式下加载的url</td> <td>string</td> <td>无</td> </tr> <tr> <td>path</td> <td>npm包的路径</td> <td>string</td> <td>无</td> </tr> </tbody> </table> <p>API使用方式如下：</p> <pre class="language-js"><code class="language-js"><span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">SAN_CLI_UI_DEV</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 在开发模式下加载自定义端口文件</span>\n    api<span class="token punctuation">.</span><span class="token function">registerAddon</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        id<span class="token operator">:</span> <span class="token string">\'san.widgets.client-addon.dev\'</span><span class="token punctuation">,</span>\n        url<span class="token operator">:</span> <span class="token string">\'http://localhost:8889/index.js\'</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">else</span> <span class="token punctuation">{</span>\n    api<span class="token punctuation">.</span><span class="token function">registerAddon</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token comment">// 在生产模式下加载npm包的路径</span>\n        id<span class="token operator">:</span> <span class="token string">\'san.widgets.client-addon\'</span><span class="token punctuation">,</span>\n        path<span class="token operator">:</span> <span class="token string">\'san-cli-ui-addon-widgets/dist\'</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre> <p><code>api.registerAddon</code>仅实现了插件包的加载，而加载的插件显示在何处？插件的显示项以及数据操作逻辑则需要单独调用每个插件的api进行描述。</p> <p><code>San CLI UI</code>中可以注册的插件类型包括：widget插件、配置插件、任务插件、自定义视图插件。</p> <h4 id="widget%E6%8F%92%E4%BB%B6"><a class="header-anchor" href="#widget%E6%8F%92%E4%BB%B6">#</a> widget插件</h4> <p>widget（部件）插件，指显示在「项目仪表盘」内的小部件，<code>San CLI UI</code>默认部件有：欢迎提示、运行任务、终止端口、新闻订阅。</p> <p>通过<code>api.registerWidget</code>方法，开发者可实现自定义的部件，显示在仪表盘内。</p> <h5 id="api-%E8%AF%B4%E6%98%8E-2"><a class="header-anchor" href="#api-%E8%AF%B4%E6%98%8E-2">#</a> API 说明</h5> <p><strong>registerWidget</strong>:</p> <table> <thead> <tr> <th>参数</th> <th>说明</th> <th>类型</th> <th>默认值</th> </tr> </thead> <tbody> <tr> <td>id</td> <td>必选，部件唯一的 ID</td> <td>string</td> <td>无</td> </tr> <tr> <td>title</td> <td>必选，部件的名称</td> <td>string</td> <td>无</td> </tr> <tr> <td>description</td> <td>必选，部件的描述</td> <td>string</td> <td>无</td> </tr> <tr> <td>icon</td> <td>必选，组件的icon，取值可选santd内的icon类型</td> <td>string</td> <td>无</td> </tr> <tr> <td>component</td> <td>必选，加载的动态组件id，会用 ClientAddonApi 进行注册</td> <td>string</td> <td>无</td> </tr> <tr> <td>defaultHeight</td> <td>组件的默认高度（与最大最小高度可以选填）</td> <td>number</td> <td>无</td> </tr> <tr> <td>defaultWidth</td> <td>组件的默认宽度（与最大最小宽度可以选填）</td> <td>number</td> <td>无</td> </tr> <tr> <td>minHeight</td> <td>组件的最小高度</td> <td>number</td> <td>无</td> </tr> <tr> <td>minWidth</td> <td>组件的最小宽度</td> <td>number</td> <td>无</td> </tr> <tr> <td>maxHeight</td> <td>组件的最大高度</td> <td>number</td> <td>无</td> </tr> <tr> <td>maxWidth</td> <td>组件的最大宽度</td> <td>number</td> <td>无</td> </tr> <tr> <td>openDetailsButton</td> <td>是否显示部件右上角展示详情按钮，默认不显示</td> <td>boolean</td> <td>false</td> </tr> <tr> <td>needsUserConfig</td> <td>是否显示部件右上角配置按钮，默认不显示</td> <td>boolean</td> <td>false</td> </tr> <tr> <td>onConfigOpen</td> <td>当点击右上角配置按钮时，返回此函数配置的表单格式</td> <td>function({context})</td> <td>无</td> </tr> <tr> <td>defaultConfig</td> <td>onConfigOpen配置的表单的默认值</td> <td>function()</td> <td>无</td> </tr> <tr> <td>onAdded</td> <td>将部件从列表添加到仪表盘页面时触发此函数</td> <td>function({widget, definition})</td> <td>无</td> </tr> <tr> <td>onRemoved</td> <td>将部件从仪表盘页面移除时触发此函数</td> <td>function({widget, definition})</td> <td>无</td> </tr> </tbody> </table> <p>API使用方式如下：</p> <pre class="language-js"><code class="language-js">api<span class="token punctuation">.</span><span class="token function">registerWidget</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    id<span class="token operator">:</span> <span class="token string">\'san.widgets.test\'</span><span class="token punctuation">,</span> <span class="token comment">// 必选，唯一的 ID</span>\n    title<span class="token operator">:</span> <span class="token string">\'title\'</span><span class="token punctuation">,</span> <span class="token comment">// 必选，组件的名称</span>\n    description<span class="token operator">:</span> <span class="token string">\'description\'</span><span class="token punctuation">,</span>  <span class="token comment">// 必选，组件的描述</span>\n    icon<span class="token operator">:</span> <span class="token string">\'info-circle\'</span><span class="token punctuation">,</span> <span class="token comment">// 必选，组件的icon，取值可选santd内的icon类型</span>\n    component<span class="token operator">:</span> <span class="token string">\'san.widgets.components.test-widget\'</span><span class="token punctuation">,</span> <span class="token comment">// 必选，加载的动态组件，会用 ClientAddonApi 进行注册</span>\n    minWidth<span class="token operator">:</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token comment">// 宽度</span>\n    minHeight<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment">// 高度</span>\n    maxWidth<span class="token operator">:</span> <span class="token number">6</span><span class="token punctuation">,</span>\n    maxHeight<span class="token operator">:</span> <span class="token number">6</span><span class="token punctuation">,</span>\n    defaultWidth<span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token comment">// 必选</span>\n    defaultHeight<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token comment">// 必选</span>\n    openDetailsButton<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// 可选</span>\n    <span class="token function-variable function">defaultConfig</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token comment">// 可选，如果有prompt表单，返回默认配置</span>\n        hi<span class="token operator">:</span> <span class="token string">\'hello\'</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token keyword">async</span> <span class="token function">onConfigOpen</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 可选，返回表单配置</span>\n        <span class="token keyword">return</span> <span class="token punctuation">{</span>\n            prompts<span class="token operator">:</span> <span class="token punctuation">[</span>\n                <span class="token punctuation">{</span>\n                    name<span class="token operator">:</span> <span class="token string">\'hi\'</span><span class="token punctuation">,</span>\n                    type<span class="token operator">:</span> <span class="token string">\'input\'</span><span class="token punctuation">,</span>\n                    message<span class="token operator">:</span> <span class="token string">\'\'</span><span class="token punctuation">,</span>\n                    <span class="token function-variable function">validate</span><span class="token operator">:</span> <span class="token parameter">input</span> <span class="token operator">=></span> <span class="token operator">!</span><span class="token operator">!</span>input\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">]</span>\n        <span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <h4 id="%E9%85%8D%E7%BD%AE%E6%8F%92%E4%BB%B6"><a class="header-anchor" href="#%E9%85%8D%E7%BD%AE%E6%8F%92%E4%BB%B6">#</a> 配置插件</h4> <p>配置插件主要用于在配置管理中，将项目中配置文件的修改变为可视化的表单操作，方便用户理解并修改配置项。目前<code>San CLI UI</code>内默认配置项包含<code>san.config.js</code>和<code>eslint</code>的配置。</p> <p>通过调用<code>api.registerConfig</code>可以更改项目的配置，此函数返回一个符合<a href="https://github.com/SBoudrias/Inquirer.js" target="_blank">inquirer.prompts</a>格式的对象，<code>San CLI UI</code>内支持的 inquirer 类型有：checkbox、confirm、input、list、string。通过该对象生成表单，可在项目配置中显示并修改具体项目的配置。</p> <h5 id="api-%E8%AF%B4%E6%98%8E%EF%BC%9A"><a class="header-anchor" href="#api-%E8%AF%B4%E6%98%8E%EF%BC%9A">#</a> API 说明：</h5> <p><strong>registerConfig</strong></p> <table> <thead> <tr> <th>参数</th> <th>说明</th> <th>类型</th> <th>默认值</th> </tr> </thead> <tbody> <tr> <td>id</td> <td>必选，配置项的唯一id</td> <td>string</td> <td>无</td> </tr> <tr> <td>name</td> <td>必选，配置项的展示名称</td> <td>string</td> <td>无</td> </tr> <tr> <td>description</td> <td>必选，配置项的展示描述</td> <td>string</td> <td>无</td> </tr> <tr> <td>icon</td> <td>配置项的图标，取值可选santd内的icon类型或静态图片链接</td> <td>string</td> <td>无</td> </tr> <tr> <td>link</td> <td>配置项更多的链接</td> <td>string</td> <td>无</td> </tr> <tr> <td>files</td> <td>提供配置项需要检测的配置文件，支持的类型有：json、yaml、js、package</td> <td>object</td> <td>无</td> </tr> <tr> <td>onRead</td> <td>配置详情页面显示的表单对象，对于每个配置项都包含一个描述，整体格式符合inquirer.prompts对象</td> <td>onRead: ({data}) =&gt; ({prompts: [...]})</td> <td>无</td> </tr> <tr> <td>onWrite</td> <td>数据写入配置文件触发的钩子，可在此执行node.js的代码</td> <td>onWrite: ({ prompts, answers, data, files, cwd, api }) =&gt; {...})</td> <td>无</td> </tr> </tbody> </table> <p><strong>onRead</strong></p> <table> <thead> <tr> <th>参数</th> <th>说明</th> <th>类型</th> <th>默认值</th> </tr> </thead> <tbody> <tr> <td>id</td> <td>必选，配置项的唯一id</td> <td>string</td> <td>无</td> </tr> <tr> <td>name</td> <td>必选，配置项的展示名称</td> <td>string</td> <td>无</td> </tr> <tr> <td>description</td> <td>必选，配置项的展示描述</td> <td>string</td> <td>无</td> </tr> <tr> <td>icon</td> <td>配置项的图标，取值可选santd内的icon类型或静态图片链接</td> <td>string</td> <td>无</td> </tr> <tr> <td>link</td> <td>配置项更多的链接</td> <td>string</td> <td>无</td> </tr> <tr> <td>files</td> <td>提供配置项需要检测的配置文件，支持的类型有：json、yaml、js、package</td> <td>object</td> <td>无</td> </tr> <tr> <td>onRead</td> <td>配置详情页面显示的表单对象，对于每个配置项都包含一个描述，整体格式符合inquirer.prompts对象</td> <td>onRead: ({data}) =&gt; ({prompts: [...]})</td> <td>无</td> </tr> <tr> <td>onWrite</td> <td>数据写入配置文件触发的钩子，可在此执行node.js的代码</td> <td css-module=".">onWrite: ({ prompts, answers, data, files, cwd, api }) =&gt;</td> <td>无</td> </tr> </tbody> </table> <p>通过onRead函数返回的对象，符合<a href="">inquirer.prompts</a>格式，支持配置单个表单或带多个选项卡的表单</p> <pre class="language-js"><code class="language-js"><span class="token comment">// 配置多个表单</span>\napi<span class="token punctuation">.</span><span class="token function">registerConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token comment">/* ... */</span>\n  <span class="token function-variable function">onRead</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> data<span class="token punctuation">,</span> cwd <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n    tabs<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        id<span class="token operator">:</span> <span class="token string">\'tab1\'</span><span class="token punctuation">,</span>\n        label<span class="token operator">:</span> <span class="token string">\'My tab\'</span><span class="token punctuation">,</span>\n        <span class="token comment">// 可选的</span>\n        icon<span class="token operator">:</span> <span class="token string">\'application_settings\'</span><span class="token punctuation">,</span>\n        prompts<span class="token operator">:</span> <span class="token punctuation">[</span>\n          <span class="token comment">// 表单对象</span>\n        <span class="token punctuation">]</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">{</span>\n        id<span class="token operator">:</span> <span class="token string">\'tab2\'</span><span class="token punctuation">,</span>\n        label<span class="token operator">:</span> <span class="token string">\'My other tab\'</span><span class="token punctuation">,</span>\n        prompts<span class="token operator">:</span> <span class="token punctuation">[</span>\n          <span class="token comment">// 表单对象</span>\n        <span class="token punctuation">]</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre> <p><strong>onWrite</strong></p> <table> <thead> <tr> <th>参数</th> <th>说明</th> <th>类型</th> <th>默认值</th> </tr> </thead> <tbody> <tr> <td>prompts</td> <td>运行时表单对象</td> <td>string</td> <td>无</td> </tr> <tr> <td>answers</td> <td>用户输入的回答数据</td> <td>string</td> <td>无</td> </tr> <tr> <td>data</td> <td>从配置文件读取的只读的初始化数据</td> <td>string</td> <td>无</td> </tr> <tr> <td>files</td> <td>被找到的文件的描述器 ({ type: \'json\', path: \'...\' })</td> <td>string</td> <td>无</td> </tr> <tr> <td>cwd</td> <td>当前工作目录</td> <td>string</td> <td>无</td> </tr> <tr> <td>api</td> <td>写入api辅助函数</td> <td>object</td> <td>无</td> </tr> </tbody> </table> <p><strong>onWrite.api</strong></p> <table> <thead> <tr> <th>参数</th> <th>说明</th> <th>类型</th> <th>默认值</th> </tr> </thead> <tbody> <tr> <td>assignData(fileId, newData)</td> <td>在写入前使用 Object.assign 来更新配置文件</td> <td>function</td> <td>无</td> </tr> <tr> <td>setData(fileId, newData)</td> <td>newData 的每个 key 在写入之前都将会被深设置在配置数据上 (或当值为 undefined 时被移除)。</td> <td>function</td> <td>无</td> </tr> <tr> <td>async getAnswer(id, mapper)</td> <td>为一个给定的表单 id 获取答案，并通过可能提供了的 mapper 函数 (例如 JSON.parse) 进行 map 处理。</td> <td>function</td> <td>无</td> </tr> </tbody> </table> <p>其中prompts对象格式：</p> <pre class="language-js"><code class="language-js"><span class="token punctuation">{</span>\n    id<span class="token operator">:</span> data<span class="token punctuation">.</span>name<span class="token punctuation">,</span>\n    type<span class="token operator">:</span> data<span class="token punctuation">.</span>type<span class="token punctuation">,</span>\n    name<span class="token operator">:</span> data<span class="token punctuation">.</span>short <span class="token operator">||</span> <span class="token keyword">null</span><span class="token punctuation">,</span>\n    message<span class="token operator">:</span> data<span class="token punctuation">.</span>message<span class="token punctuation">,</span>\n    group<span class="token operator">:</span> data<span class="token punctuation">.</span>group <span class="token operator">||</span> <span class="token keyword">null</span><span class="token punctuation">,</span>\n    description<span class="token operator">:</span> data<span class="token punctuation">.</span>description <span class="token operator">||</span> <span class="token keyword">null</span><span class="token punctuation">,</span>\n    link<span class="token operator">:</span> data<span class="token punctuation">.</span>link <span class="token operator">||</span> <span class="token keyword">null</span><span class="token punctuation">,</span>\n    choices<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>\n    visible<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    enabled<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    <span class="token comment">// 当前值 (未被过滤的)</span>\n    value<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>\n    <span class="token comment">// 如果用户修改过了则为 true</span>\n    valueChanged<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n    error<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>\n    tabId<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>\n    <span class="token comment">// 原始的 inquirer 提示符对象</span>\n    raw<span class="token operator">:</span> data\n<span class="token punctuation">}</span></code></pre> <p>API使用方式如下：</p> <pre class="language-js"><code class="language-js">\t<span class="token comment">// san.config.js的配置</span>\n    api<span class="token punctuation">.</span><span class="token function">registerConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        id<span class="token operator">:</span> <span class="token string">\'san.san-cli\'</span><span class="token punctuation">,</span> <span class="token comment">// 配置项的id</span>\n        name<span class="token operator">:</span> <span class="token string">\'San CLI\'</span><span class="token punctuation">,</span>\n        description<span class="token operator">:</span> <span class="token string">\'configuration.san-cli.description\'</span><span class="token punctuation">,</span>\n        link<span class="token operator">:</span> <span class="token string">\'https://ecomfe.github.io/san-cli/#/config\'</span><span class="token punctuation">,</span>\n        files<span class="token operator">:</span> <span class="token punctuation">{</span>\n            san<span class="token operator">:</span> <span class="token punctuation">{</span>\n                js<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'san.config.js\'</span><span class="token punctuation">]</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        icon<span class="token operator">:</span> iconUrl<span class="token punctuation">,</span>\n        <span class="token function-variable function">onRead</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>data<span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n            prompts<span class="token operator">:</span> <span class="token punctuation">[</span>\n                <span class="token punctuation">{</span>\n                    name<span class="token operator">:</span> <span class="token string">\'publicPath\'</span><span class="token punctuation">,</span>\n                    type<span class="token operator">:</span> <span class="token string">\'input\'</span><span class="token punctuation">,</span>\n                    <span class="token keyword">default</span><span class="token operator">:</span> <span class="token string">\'/\'</span><span class="token punctuation">,</span>\n                    value<span class="token operator">:</span> data<span class="token punctuation">.</span>san <span class="token operator">&amp;&amp;</span> data<span class="token punctuation">.</span>san<span class="token punctuation">.</span>publicPath<span class="token punctuation">,</span>\n                    message<span class="token operator">:</span> <span class="token string">\'configuration.san-cli.publicPath.label\'</span><span class="token punctuation">,</span>\n                    description<span class="token operator">:</span> <span class="token string">\'configuration.san-cli.publicPath.description\'</span><span class="token punctuation">,</span>\n                    group<span class="token operator">:</span> <span class="token string">\'configuration.san-cli.groups.general\'</span><span class="token punctuation">,</span>\n                    link<span class="token operator">:</span> <span class="token string">\'https://ecomfe.github.io/san-cli/#/config\'</span>\n                <span class="token punctuation">}</span><span class="token punctuation">,</span>\n                <span class="token operator">...</span>\n            <span class="token punctuation">]</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token function-variable function">onWrite</span><span class="token operator">:</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>api<span class="token punctuation">,</span> prompts<span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span> <span class="token comment">// 在写入时显示</span>\n            <span class="token keyword">const</span> sanData <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> prompt <span class="token keyword">of</span> prompts<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                sanData<span class="token punctuation">[</span>prompt<span class="token punctuation">.</span>id<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">await</span> api<span class="token punctuation">.</span><span class="token function">getAnswer</span><span class="token punctuation">(</span>prompt<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n            api<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token string">\'san\'</span><span class="token punctuation">,</span> sanData<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <h5 id="%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6"><a class="header-anchor" href="#%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6">#</a> 配置文件</h5> <p>在<code>registerConfig</code>配置项<code>files</code>中可以声明多个配置文件，例如 .eslintrc 和 san.config.js，支持的类型有：json、yaml、js、package。配置时需要严格按照次顺序，如果这项配置不存在，则会创建列表中的第一个文件。例如:</p> <pre class="language-js"><code class="language-js">    api<span class="token punctuation">.</span><span class="token function">registerConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        id<span class="token operator">:</span> <span class="token string">\'san.eslintrc\'</span><span class="token punctuation">,</span>\n        name<span class="token operator">:</span> <span class="token string">\'ESLint configuration\'</span><span class="token punctuation">,</span>\n        description<span class="token operator">:</span> <span class="token string">\'configuration.eslint.description\'</span><span class="token punctuation">,</span>\n        link<span class="token operator">:</span> <span class="token string">\'https://eslint.org\'</span><span class="token punctuation">,</span>\n        files<span class="token operator">:</span> <span class="token punctuation">{</span>\n            eslint<span class="token operator">:</span> <span class="token punctuation">{</span>\n                js<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'.eslintrc.js\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n                json<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'.eslintrc\'</span><span class="token punctuation">,</span> <span class="token string">\'.eslintrc.json\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n                yaml<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'.eslintrc.yaml\'</span><span class="token punctuation">,</span> <span class="token string">\'.eslintrc.yml\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n                <span class="token comment">// 会从 `package.json` 读取</span>\n                <span class="token keyword">package</span><span class="token operator">:</span> <span class="token string">\'eslintConfig\'</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token operator">...</span>\n    <span class="token punctuation">)</span></code></pre> <p>配置文件的内容与读取数据的对应关系如下：</p> <pre class="language-js"><code class="language-js"><span class="token comment">// ui.js</span>\napi<span class="token punctuation">.</span><span class="token function">registerConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        id<span class="token operator">:</span> <span class="token string">\'san.san-cli\'</span><span class="token punctuation">,</span> <span class="token comment">// 配置项的id</span>\n        name<span class="token operator">:</span> <span class="token string">\'San CLI\'</span><span class="token punctuation">,</span>\n        description<span class="token operator">:</span> <span class="token string">\'configuration.san-cli.description\'</span><span class="token punctuation">,</span>\n        link<span class="token operator">:</span> <span class="token string">\'https://ecomfe.github.io/san-cli/#/config\'</span><span class="token punctuation">,</span>\n        files<span class="token operator">:</span> <span class="token punctuation">{</span>\n            san<span class="token operator">:</span> <span class="token punctuation">{</span>\n                js<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'san.config.js\'</span><span class="token punctuation">]</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// san.config.js</span>\n<span class="token punctuation">{</span>\n    assetsDir<span class="token operator">:</span> <span class="token constant">STATIC_PRO</span><span class="token punctuation">,</span>\n    publicPath<span class="token operator">:</span> <span class="token string">\'/\'</span><span class="token punctuation">,</span>\n    outputDir<span class="token operator">:</span> <span class="token string">\'dist\'</span><span class="token punctuation">,</span>\n    filenameHashing<span class="token operator">:</span> isProduction<span class="token punctuation">,</span>\n    css<span class="token operator">:</span> <span class="token punctuation">{</span>\n        sourceMap<span class="token operator">:</span> isProduction<span class="token punctuation">,</span>\n        cssPreprocessor<span class="token operator">:</span> <span class="token string">\'less\'</span><span class="token punctuation">,</span>\n        extract<span class="token operator">:</span> <span class="token boolean">true</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n\n    pages<span class="token operator">:</span> <span class="token punctuation">{</span>\n        index<span class="token operator">:</span> <span class="token punctuation">{</span>\n            entry<span class="token operator">:</span> <span class="token string">\'./pages/index.js\'</span><span class="token punctuation">,</span>\n            filename<span class="token operator">:</span> <span class="token string">\'index.html\'</span><span class="token punctuation">,</span>\n            template<span class="token operator">:</span> <span class="token string">\'./assets/index.html\'</span><span class="token punctuation">,</span>\n            title<span class="token operator">:</span> <span class="token string">\'项目管理器 - san ui\'</span><span class="token punctuation">,</span>\n            chunks<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'index\'</span><span class="token punctuation">,</span> <span class="token string">\'vendors\'</span><span class="token punctuation">]</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token operator">...</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 读取到cli ui后</span>\n<span class="token punctuation">{</span>\n\tsan<span class="token operator">:</span> <span class="token punctuation">{</span>\n\t\tassetsDir<span class="token operator">:</span> <span class="token constant">STATIC_PRO</span><span class="token punctuation">,</span>\n    \tpublicPath<span class="token operator">:</span> <span class="token string">\'/\'</span><span class="token punctuation">,</span>\n    \toutputDir<span class="token operator">:</span> <span class="token string">\'dist\'</span><span class="token punctuation">,</span>\n    \tfilenameHashing<span class="token operator">:</span> isProduction<span class="token punctuation">,</span>\n    \tcss<span class="token operator">:</span> <span class="token punctuation">{</span>\n        \tsourceMap<span class="token operator">:</span> isProduction<span class="token punctuation">,</span>\n        \tcssPreprocessor<span class="token operator">:</span> <span class="token string">\'less\'</span><span class="token punctuation">,</span>\n        \textract<span class="token operator">:</span> <span class="token boolean">true</span>\n    \t<span class="token punctuation">}</span><span class="token punctuation">,</span>\n    \tpages<span class="token operator">:</span> <span class="token punctuation">{</span>\n        \tindex<span class="token operator">:</span> <span class="token punctuation">{</span>\n            \tentry<span class="token operator">:</span> <span class="token string">\'./pages/index.js\'</span><span class="token punctuation">,</span>\n            \tfilename<span class="token operator">:</span> <span class="token string">\'index.html\'</span><span class="token punctuation">,</span>\n            \ttemplate<span class="token operator">:</span> <span class="token string">\'./assets/index.html\'</span><span class="token punctuation">,</span>\n            \ttitle<span class="token operator">:</span> <span class="token string">\'项目管理器 - san ui\'</span><span class="token punctuation">,</span>\n            \tchunks<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'index\'</span><span class="token punctuation">,</span> <span class="token string">\'vendors\'</span><span class="token punctuation">]</span>\n        \t<span class="token punctuation">}</span>\n    \t<span class="token punctuation">}</span>\n    <span class="token operator">...</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre> <h4 id="%E4%BB%BB%E5%8A%A1%E6%8F%92%E4%BB%B6"><a class="header-anchor" href="#%E4%BB%BB%E5%8A%A1%E6%8F%92%E4%BB%B6">#</a> 任务插件</h4> <p>在项目任务中展示的任务项，生成自项目 package.json 文件的 scripts 字段。</p> <p><code>San CLI UI</code>默认内置了<code>san serve</code>、<code>san build</code>、<code>san inspect</code>三个命令的增强任务，包括：<code>start</code>、<code>build</code>、<code>analyzer</code>、<code>build:modern</code>、<code>inspect</code>几个任务。</p> <p>通过<code>api.registerTask</code> 方法，实现任务的“增强”，为任务增加额外的信息和显示，并能在对应的调用周期下实现附加功能。</p> <h4 id="api-%E8%AF%B4%E6%98%8E-3"><a class="header-anchor" href="#api-%E8%AF%B4%E6%98%8E-3">#</a> API 说明</h4> <p><strong>registerTask</strong></p> <table> <thead> <tr> <th>参数</th> <th>说明</th> <th>类型</th> <th>默认值</th> </tr> </thead> <tbody> <tr> <td>match</td> <td>正则匹配对应的命令</td> <td>reg</td> <td>无</td> </tr> <tr> <td>description</td> <td>任务对应的描述</td> <td>string</td> <td>无</td> </tr> <tr> <td>icon</td> <td>任务的图标，取值可选santd内的icon类型或静态图片链接</td> <td>string</td> <td>无</td> </tr> <tr> <td>link</td> <td>任务说明的链接</td> <td>string</td> <td>无</td> </tr> <tr> <td>prompts</td> <td>返回任务可配置项的表单，整体格式符合inquirer.prompts对象</td> <td>object</td> <td>无</td> </tr> <tr> <td>onBeforeRun</td> <td>启动任务之前的钩子函数，可以修改任务参数</td> <td>onBeforeRun: async ({ answers, args }) =&gt; {})</td> <td>无</td> </tr> <tr> <td>onRun</td> <td>任务运行之后立即调用的钩子函数</td> <td>onRun: async ({ args, child, cwd }) =&gt; {}),child: Node 子进程,cwd: 进程所在目录</td> <td>无</td> </tr> <tr> <td>onExit</td> <td>任务退出后触发的钩子函数</td> <td>onExit: async ({ args, child, cwd, code, signal }) =&gt; {}) code：退出码</td> <td>无</td> </tr> <tr> <td>views</td> <td>额外的视图，默认情况下，这里是展示终端输出的 <code>dashboard</code> 视图</td> <td>array</td> <td>无</td> </tr> <tr> <td>defaultView</td> <td>展示任务详情时默认选择的视图 (默认是 <code>dashboard</code>)</td> <td>string</td> <td>无</td> </tr> </tbody> </table> <p>API使用方式如下：</p> <pre class="language-js"><code class="language-js">api<span class="token punctuation">.</span><span class="token function">registerTask</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token comment">// 匹配san serve</span>\n    match<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">san(-cli\\/index\\.js)? serve(\\s+--\\S+(\\s+\\S+)?)*$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n    description<span class="token operator">:</span> <span class="token string">\'task.description.serve\'</span><span class="token punctuation">,</span>\n    link<span class="token operator">:</span> <span class="token string">\'https://ecomfe.github.io/san-cli\'</span><span class="token punctuation">,</span>\n    icon<span class="token operator">:</span> sanIcon<span class="token punctuation">,</span>\n    prompts<span class="token operator">:</span> <span class="token punctuation">[</span>\n        <span class="token punctuation">{</span>\n            name<span class="token operator">:</span> <span class="token string">\'open\'</span><span class="token punctuation">,</span>\n            type<span class="token operator">:</span> <span class="token string">\'confirm\'</span><span class="token punctuation">,</span>\n            <span class="token keyword">default</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n            message<span class="token operator">:</span> <span class="token string">\'task.serve.open\'</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token operator">...</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token function-variable function">onBeforeRun</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>answers<span class="token punctuation">,</span> args<span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n        <span class="token operator">...</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token function-variable function">onRun</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n        <span class="token operator">...</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token function-variable function">onExit</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n        <span class="token operator">...</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    views<span class="token operator">:</span> <span class="token punctuation">[</span>\n        <span class="token punctuation">{</span>\n            id<span class="token operator">:</span> <span class="token string">\'san.cli-ui.views.dashboard\'</span><span class="token punctuation">,</span>\n            label<span class="token operator">:</span> <span class="token string">\'addons.dashboard.title\'</span><span class="token punctuation">,</span>\n            component<span class="token operator">:</span> <span class="token string">\'san.cli-ui.components.dashboard\'</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token operator">...</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    defaultView<span class="token operator">:</span> <span class="token string">\'san.cli-ui.views.dashboard\'</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <h3 id="%E8%87%AA%E5%AE%9A%E4%B9%89%E8%A7%86%E5%9B%BE%E6%8F%92%E4%BB%B6%E4%B8%8E%E8%87%AA%E5%AE%9A%E4%B9%89%E8%B7%AF%E7%94%B1%E6%8F%92%E4%BB%B6"><a class="header-anchor" href="#%E8%87%AA%E5%AE%9A%E4%B9%89%E8%A7%86%E5%9B%BE%E6%8F%92%E4%BB%B6%E4%B8%8E%E8%87%AA%E5%AE%9A%E4%B9%89%E8%B7%AF%E7%94%B1%E6%8F%92%E4%BB%B6">#</a> 自定义视图插件与自定义路由插件</h3> <p>开发者可以使用<code>api.registerView</code>创建自定义视图，结合使用<code>ClientAddonApi.addRoute</code>创建自定义路由跳转该视图。</p> <p>在ui.js通过<code>api.registerView</code>注册的视图，在服务端触发视图增加的subscription监听，将新增的页面路径及名称推送到客户端显示，而客户端组件加载时，已通过ClientAddonApi.addRoute将路由加载到san-router，当点击跳转时，就如处理<code>San CLI UI</code>默认路由一般，跳转至对应自定义组件页面。</p> <h4 id="api-%E8%AF%B4%E6%98%8E-4"><a class="header-anchor" href="#api-%E8%AF%B4%E6%98%8E-4">#</a> API 说明</h4> <p><strong>api.registerView</strong></p> <table> <thead> <tr> <th>参数</th> <th>说明</th> <th>类型</th> <th>默认值</th> </tr> </thead> <tbody> <tr> <td>id</td> <td>视图id，使用 \'ClientAddonApi.addRoutes\' 方法中相同的id</td> <td>string</td> <td>无</td> </tr> <tr> <td>name</td> <td>视图显示名称</td> <td>string</td> <td>无</td> </tr> <tr> <td>icon</td> <td>按钮图标名称（santd的图标类型）</td> <td>string</td> <td>无</td> </tr> </tbody> </table> <p>API使用方式如下：</p> <pre class="language-js"><code class="language-js">api<span class="token punctuation">.</span><span class="token function">registerView</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    id<span class="token operator">:</span> <span class="token string">\'san.myviews.views\'</span><span class="token punctuation">,</span>\n    name<span class="token operator">:</span> <span class="token string">\'我的视图\'</span><span class="token punctuation">,</span>\n    <span class="token comment">// Santd的图标</span>\n    icon<span class="token operator">:</span> <span class="token string">\'smile\'</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <p><strong>api.registerView</strong>通常需要配合<code>ClientAddon</code>对象的<code>ClientAddonApi.addRoute</code>方法一同使用：</p> <pre class="language-js"><code class="language-js"><span class="token keyword">import</span> Myview <span class="token keyword">from</span> <span class="token string">\'./components/myview\'</span><span class="token punctuation">;</span>\n\n<span class="token comment">/* global ClientAddonApi */</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>ClientAddonApi<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 注意这里第一个参数，应registerView的id参数相同，这里会创建一个\'/addon/san.myviews.views\' 路由</span>\n    ClientAddonApi<span class="token punctuation">.</span><span class="token function">addRoutes</span><span class="token punctuation">(</span><span class="token string">\'san.myviews.views\'</span><span class="token punctuation">,</span> Myview<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre> <h2 id="2.-%E4%BA%8B%E4%BB%B6%E4%BA%A4%E4%BA%92"><a class="header-anchor" href="#2.-%E4%BA%8B%E4%BB%B6%E4%BA%A4%E4%BA%92">#</a> 2. 事件交互</h2> <h3 id="prompts%E8%A1%A8%E5%8D%95%E5%AF%B9%E8%B1%A1"><a class="header-anchor" href="#prompts%E8%A1%A8%E5%8D%95%E5%AF%B9%E8%B1%A1">#</a> prompts表单对象</h3> <p>prompts对象必须是合法的 <a href="https://github.com/SBoudrias/Inquirer.js" target="_blank">inquirer</a> 对象。基本的结构如下：</p> <pre class="language-js"><code class="language-js"><span class="token punctuation">{</span>\n    id<span class="token operator">:</span> data<span class="token punctuation">.</span>name<span class="token punctuation">,</span>\n    type<span class="token operator">:</span> data<span class="token punctuation">.</span>type<span class="token punctuation">,</span>\n    visible<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    enabled<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    name<span class="token operator">:</span> data<span class="token punctuation">.</span>name <span class="token operator">||</span> <span class="token keyword">null</span><span class="token punctuation">,</span>\n    message<span class="token operator">:</span> data<span class="token punctuation">.</span>message<span class="token punctuation">,</span>\n    placeholder<span class="token operator">:</span> data<span class="token punctuation">.</span>placeholder <span class="token operator">||</span> <span class="token keyword">null</span><span class="token punctuation">,</span>\n    group<span class="token operator">:</span> data<span class="token punctuation">.</span>group <span class="token operator">||</span> <span class="token keyword">null</span><span class="token punctuation">,</span>\n    description<span class="token operator">:</span> data<span class="token punctuation">.</span>description <span class="token operator">||</span> <span class="token keyword">null</span><span class="token punctuation">,</span>\n    link<span class="token operator">:</span> data<span class="token punctuation">.</span>link <span class="token operator">||</span> <span class="token keyword">null</span><span class="token punctuation">,</span>\n    choices<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>\n    value<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>\n    valueChanged<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n    error<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>\n    tabId<span class="token operator">:</span> data<span class="token punctuation">.</span>tabId <span class="token operator">||</span> <span class="token keyword">null</span><span class="token punctuation">,</span>\n    formItemLayout<span class="token operator">:</span> data<span class="token punctuation">.</span>formItemLayout <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n    raw<span class="token operator">:</span> data\n<span class="token punctuation">}</span></code></pre> <p>支持的 inquirer 类型有：checkbox、confirm、input、list、string。</p> <p>confirm类型的组件会以一个switch按钮展示，使用例子如下：</p> <pre class="language-js"><code class="language-js">\n<span class="token punctuation">{</span>\n    name<span class="token operator">:</span> <span class="token string">\'sourceMap\'</span><span class="token punctuation">,</span>\n    type<span class="token operator">:</span> <span class="token string">\'confirm\'</span><span class="token punctuation">,</span>\n    <span class="token keyword">default</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    value<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n    <span class="token comment">// 名称</span>\n    message<span class="token operator">:</span> <span class="token string">\'在生产环境启用 Source Map\'</span><span class="token punctuation">,</span>\n    <span class="token comment">// 附加描述</span>\n    description<span class="token operator">:</span> <span class="token string">\'如果你不需要生产环境下的 source map，禁用此项可以加速生产环境构建。\'</span><span class="token punctuation">,</span>\n    <span class="token comment">// 用来将提示符按章节分组</span>\n    group<span class="token operator">:</span> <span class="token string">\'基础设置\'</span><span class="token punctuation">,</span>\n    <span class="token comment">// “More info”链接</span>\n    link<span class="token operator">:</span> <span class="token string">\'https://ecomfe.github.io/san-cli/#/config\'</span>\n<span class="token punctuation">}</span></code></pre> <p>input类型的组件会以一个输入框展示，使用例子如下：</p> <pre class="language-js"><code class="language-js"><span class="token punctuation">{</span>\n    name<span class="token operator">:</span> <span class="token string">\'publicPath\'</span><span class="token punctuation">,</span>\n    type<span class="token operator">:</span> <span class="token string">\'input\'</span><span class="token punctuation">,</span>\n    <span class="token keyword">default</span><span class="token operator">:</span> <span class="token string">\'/\'</span><span class="token punctuation">,</span>\n    value<span class="token operator">:</span> <span class="token string">\'/\'</span><span class="token punctuation">,</span>\n    message<span class="token operator">:</span> <span class="token string">\'在生产环境启用 Source Map\'</span><span class="token punctuation">,</span>\n    description<span class="token operator">:</span> <span class="token string">\'如果你不需要生产环境下的 source map，禁用此项可以加速生产环境构建。\'</span><span class="token punctuation">,</span>\n    group<span class="token operator">:</span> <span class="token string">\'基础设置\'</span><span class="token punctuation">,</span>\n    link<span class="token operator">:</span> <span class="token string">\'https://ecomfe.github.io/san-cli/#/config\'</span>\n<span class="token punctuation">}</span></code></pre> <p>list类型的组件会以一个下拉列表框展示，使用例子如下：</p> <pre class="language-js"><code class="language-js"><span class="token punctuation">{</span>\n    name<span class="token operator">:</span> <span class="token string">\'import/unambiguous\'</span><span class="token punctuation">,</span>\n    type<span class="token operator">:</span> <span class="token string">\'list\'</span><span class="token punctuation">,</span>\n    message<span class="token operator">:</span> <span class="token string">\'代码质量和纠错\'</span><span class="token punctuation">,</span>\n    value<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n    choices<span class="token operator">:</span> <span class="token punctuation">[</span>\n        <span class="token punctuation">{</span>\n            name<span class="token operator">:</span> <span class="token string">\'关闭\'</span><span class="token punctuation">,</span>\n            value<span class="token operator">:</span> <span class="token number">0</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">{</span>\n            name<span class="token operator">:</span> <span class="token string">\'警告\'</span><span class="token punctuation">,</span>\n            value<span class="token operator">:</span> <span class="token number">1</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">{</span>\n            name<span class="token operator">:</span> <span class="token string">\'错误\'</span><span class="token punctuation">,</span>\n            value<span class="token operator">:</span> <span class="token number">2</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span>\n<span class="token punctuation">}</span></code></pre> <h3 id="%E6%8F%92%E4%BB%B6action"><a class="header-anchor" href="#%E6%8F%92%E4%BB%B6action">#</a> 插件action</h3> <p>插件的action是<code>San CLI UI</code>的插件在浏览器端和Node.js之间的事件调用监听机制，例如终止端口插件的终止按钮，在按下后，会利用此api向node端传递需要杀死的端口，进而调用kill函数完成功能。</p> <h4 id="api-%E8%AF%B4%E6%98%8E-5"><a class="header-anchor" href="#api-%E8%AF%B4%E6%98%8E-5">#</a> API 说明</h4> <p><strong>api.callActionw</strong></p> <table> <thead> <tr> <th>参数</th> <th>说明</th> <th>类型</th> <th>默认值</th> </tr> </thead> <tbody> <tr> <td>id</td> <td>需要触发的action的唯一id</td> <td>string</td> <td>无</td> </tr> <tr> <td>params</td> <td>action的参数</td> <td>Object</td> <td>无</td> </tr> </tbody> </table> <p><strong>api.onAction</strong></p> <table> <thead> <tr> <th>参数</th> <th>说明</th> <th>类型</th> <th>默认值</th> </tr> </thead> <tbody> <tr> <td>id</td> <td>需要监听的action的id</td> <td>string</td> <td>无</td> </tr> <tr> <td>callback</td> <td>监听到action后执行的回调函数</td> <td>function</td> <td>无</td> </tr> </tbody> </table> <p>使用方式如下</p> <pre class="language-js"><code class="language-js">    <span class="token comment">// 调用一个 action</span>\n    api<span class="token punctuation">.</span><span class="token function">callAction</span><span class="token punctuation">(</span><span class="token string">\'san.widgets.actions.kill-port\'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n        port<span class="token operator">:</span> <span class="token number">8080</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">results</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>results<span class="token punctuation">)</span>\n\t<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">errors</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  \t\tconsole<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>errors<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token comment">// 监听一个 action</span>\n    api<span class="token punctuation">.</span><span class="token function">onAction</span><span class="token punctuation">(</span><span class="token string">\'san.widgets.actions.kill-port\'</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token parameter">params</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n        <span class="token operator">...</span>\n        <span class="token keyword">return</span> <span class="token punctuation">{</span>\n            status<span class="token operator">:</span> res\n        <span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <blockquote> <p>需要确保id唯一，建议使用命名空间调用： const {onAction, callAction} = api.namespace(\'myname.\')</p> </blockquote> <p>在浏览器端的组件内，可通过调用<code>san-component</code>扩展的方法，在插件action方法调用的不同时期执行逻辑：</p> <ul> <li><code>$onPluginActionCalled</code>：在action调用后执行</li> <li><code>$onPluginActionResolved</code>：在action返回后执行</li> <li><code>$callPluginAction</code>：在action调用时执行</li> </ul> <p>例如：</p> <pre class="language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n    <span class="token function">created</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$onPluginActionCalled</span><span class="token punctuation">(</span><span class="token parameter">action</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n            <span class="token comment">// 当 action 被调用时 且在运行之前</span>\n            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'called\'</span><span class="token punctuation">,</span> action<span class="token punctuation">)</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$onPluginActionResolved</span><span class="token punctuation">(</span><span class="token parameter">action</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n            <span class="token comment">// 当 action 运行完毕之后</span>\n            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'resolved\'</span><span class="token punctuation">,</span> action<span class="token punctuation">)</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n    methods<span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token function">testAction</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token comment">// 调用一个插件的 action</span>\n            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$callPluginAction</span><span class="token punctuation">(</span><span class="token string">\'com.my-name.test-action\'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n                meow<span class="token operator">:</span> <span class="token string">\'meow\'</span>\n            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre> <h3 id="%E6%8F%92%E4%BB%B6%E4%BA%8B%E4%BB%B6%E9%92%A9%E5%AD%90"><a class="header-anchor" href="#%E6%8F%92%E4%BB%B6%E4%BA%8B%E4%BB%B6%E9%92%A9%E5%AD%90">#</a> 插件事件钩子</h3> <p>在ui.js的配置中，提供了项目不同阶段的时间钩子：</p> <table> <thead> <tr> <th>api</th> <th>说明</th> <th>例子</th> </tr> </thead> <tbody> <tr> <td><code>onProjectOpen</code></td> <td>当插件在当前项目中第一次被加载时触发</td> <td><code>api.onProjectOpen((project, previousProject) =&gt; { // 重置数据 })</code></td> </tr> <tr> <td><code>onPluginReload</code></td> <td>当插件被重新加载时触发</td> <td><code>api.onPluginReload((project) =&gt; { console.log(\'plugin reloaded\') })</code></td> </tr> </tbody> </table> <h3 id="%E8%BF%9B%E7%A8%8B%E9%80%9A%E8%AE%AFipc"><a class="header-anchor" href="#%E8%BF%9B%E7%A8%8B%E9%80%9A%E8%AE%AFipc">#</a> 进程通讯ipc</h3> <p>IPC 就是进程间通信 (Inter-Process Communication) 的缩写。该系统允许你轻松的从子进程 (例如任务) 发送消息，并且轻量快速。在ui.js中使用<code>api.getIpc()</code>获取IPC的实例，进而实现进程的通讯，包含以下方法：</p> <ul> <li><code>ipc.on(callback)</code>：添加listener监听</li> <li><code>ipc.off(callback)</code>：移除listener监听</li> <li><code>ipc.send(data)</code>：向连接的所有的IPC客户端发送消息</li> </ul> <p>使用方式如下：</p> <pre class="language-js"><code class="language-js">   ipc<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>data<span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span>sanCliServe<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            sharedData<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">\'serve-url\'</span><span class="token punctuation">,</span> data<span class="token punctuation">.</span>sanCliServe<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    ipc<span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>data<span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n        <span class="token operator">...</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    ipc<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <h3 id="%E6%95%B0%E6%8D%AE%E5%85%B1%E4%BA%AB"><a class="header-anchor" href="#%E6%95%B0%E6%8D%AE%E5%85%B1%E4%BA%AB">#</a> 数据共享</h3> <p><code>San CLI UI</code>为开发者提供一种简易的、自定义组件之间通过共享的数据互通信息的方式。在ui.js中使用<code>const sharedData = api.getSharedData(\'my.com.\')</code>获取sharedData的实例，为保证唯一使用，需要在使用数据函数时，输入唯一id生成自己的命名空间。包含以下方法：</p> <ul> <li><code>sharedData.get($id)</code>：获取sharedData中$id的数据</li> <li><code>sharedData.set($id, value, {disk})</code>：设置sharedData中$id的数据</li> <li><code>sharedData.remove($id)</code>：清除sharedData中的$id的数据</li> <li><code>sharedData.watch($id, handler)</code>：监听sharedData的$id的值变化</li> <li><code>sharedData.unwatch($id, handler)</code>：清除sharedData的$id的监听</li> </ul> <p>使用方法如下</p> <pre class="language-js"><code class="language-js">\n<span class="token comment">// 设置或更新</span>\napi<span class="token punctuation">.</span><span class="token function">setSharedData</span><span class="token punctuation">(</span><span class="token string">\'com.my-name.my-variable\'</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span>\n\n<span class="token comment">// 获取</span>\n<span class="token keyword">const</span> sharedData <span class="token operator">=</span> api<span class="token punctuation">.</span><span class="token function">getSharedData</span><span class="token punctuation">(</span><span class="token string">\'com.my-name.my-variable\'</span><span class="token punctuation">)</span>\n\n\n<span class="token comment">// 移除</span>\napi<span class="token punctuation">.</span><span class="token function">removeSharedData</span><span class="token punctuation">(</span><span class="token string">\'com.my-name.my-variable\'</span><span class="token punctuation">)</span>\n\n<span class="token comment">// 侦听变化</span>\n<span class="token keyword">const</span> <span class="token function-variable function">watcher</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> id</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> id<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\napi<span class="token punctuation">.</span><span class="token function">watchSharedData</span><span class="token punctuation">(</span><span class="token string">\'com.my-name.my-variable\'</span><span class="token punctuation">,</span> watcher<span class="token punctuation">)</span>\n<span class="token comment">// 取消侦听</span>\napi<span class="token punctuation">.</span><span class="token function">unwatchSharedData</span><span class="token punctuation">(</span><span class="token string">\'com.my-name.my-variable\'</span><span class="token punctuation">,</span> watcher<span class="token punctuation">)</span>\n\n<span class="token comment">// 带命名空间的版本</span>\n<span class="token keyword">const</span> <span class="token punctuation">{</span>\n  setSharedData<span class="token punctuation">,</span>\n  getSharedData<span class="token punctuation">,</span>\n  removeSharedData<span class="token punctuation">,</span>\n  watchSharedData<span class="token punctuation">,</span>\n  unwatchSharedData\n<span class="token punctuation">}</span> <span class="token operator">=</span> api<span class="token punctuation">.</span><span class="token function">namespace</span><span class="token punctuation">(</span><span class="token string">\'com.my-name.\'</span><span class="token punctuation">)</span>\n\n<span class="token function">setSharedData</span><span class="token punctuation">(</span><span class="token string">\'my-variable\'</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <p>在浏览器端的组件内，可通过调用<code>san-component</code>扩展的方法，调用sharedData：</p> <ul> <li><code>$getSharedData($id)</code>：获取sharedData中$id的数据</li> <li><code>$watchSharedData($id, handler)</code>：监听sharedData的$id的值变化</li> <li><code>$setSharedData($id, data)</code>：设置sharedData中$id的数据</li> </ul> <p>例如：</p> <pre class="language-js"><code class="language-js">\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n\n  <span class="token keyword">async</span> <span class="token function">created</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$getSharedData</span><span class="token punctuation">(</span><span class="token string">\'com.my-name.my-variable\'</span><span class="token punctuation">)</span>\n\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$watchSharedData</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">com.my-name.my-variable</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token parameter">value</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n    <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$setSharedData</span><span class="token punctuation">(</span><span class="token string">\'com.my-name.my-variable\'</span><span class="token punctuation">,</span> <span class="token string">\'new-value\'</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre> <h2 id="3.%E6%8C%81%E4%B9%85%E5%AD%98%E5%82%A8db"><a class="header-anchor" href="#3.%E6%8C%81%E4%B9%85%E5%AD%98%E5%82%A8db">#</a> 3.持久存储db</h2> <p><code>San CLI UI</code>为开发者提供对db操作的方法，数据存储的能力。在ui.js中通过调用<code>api.getDB(namespace)</code> 获取lowdb的实例对象，同样为隔离，需要输入唯一的命名空间。包含以下方法：</p> <ul> <li><code>get(key)</code>：获取一个名为key的值</li> <li><code>set(key, value)</code>：更新key的值为value</li> </ul> <h2 id="4.%E5%B7%A5%E5%85%B7%E5%87%BD%E6%95%B0"><a class="header-anchor" href="#4.%E5%B7%A5%E5%85%B7%E5%87%BD%E6%95%B0">#</a> 4.工具函数</h2> <ul> <li><code>api.hasPlugin(\'eslint\')</code> 如果项目使用了该插件则返回 true</li> <li><code>api.getCwd()</code>获取当前工作目录。</li> <li><code>api.resolve(path)</code> 在当前工程下解析一个文件：</li> <li><code>api.getProject()</code> 得到当前打开的工程。</li> </ul> <h2 id="clientaddon%E5%AF%B9%E8%B1%A1"><a class="header-anchor" href="#clientaddon%E5%AF%B9%E8%B1%A1">#</a> ClientAddon对象</h2> <p>在插件包内，ClientAddon实例化的对象ClientAddonApi主要完成两件事：</p> <ul> <li>插件内对应组件的定义：<code>defineComponent</code></li> <li>将插件内的组件语言包扩展至<code>San CLI UI</code>：<code>addLocales</code></li> </ul> <p>在插件内的使用方式如下：</p> <pre class="language-js"><code class="language-js"><span class="token keyword">import</span> widgetdemo <span class="token keyword">from</span> <span class="token string">\'./components/widget-demo\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> locales <span class="token keyword">from</span> <span class="token string">\'./locales.json\'</span><span class="token punctuation">;</span>\n\n<span class="token comment">/* global ClientAddonApi */</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>ClientAddonApi<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 扩展语言</span>\n    ClientAddonApi<span class="token punctuation">.</span><span class="token function">addLocales</span><span class="token punctuation">(</span>locales<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// 推荐以类型前缀定义组件的唯一id：\'san.widget\'</span>\n    ClientAddonApi<span class="token punctuation">.</span><span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token string">\'san.widget.components.widget-demo\'</span><span class="token punctuation">,</span> widgetdemo<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre> <p>通过<code>defineComponent</code>将自定义组件加载到<code>San CLI UI</code>内，此时组件内可使用san-component增强的功能，如santd组件、<code>$onPluginActionCalled</code>等方法；通过<code>addLocales</code>将自定义组件的语言包加载到<code>San CLI UI</code>内，此时组件内可直接使用<code>this.$t(key)</code>的形式显示页面文案；通过<code>ClientAddonApi.awaitComponent</code>方法，在组件加载到后，将组件挂载到页面对应位置。</p> </div></div> '},138:function(n,s,a){var t=a(1),p=a(104),o=a(39).default;n.exports=a(39),n.exports.default=t(o,p,[])},39:function(n,s,a){"use strict";a.r(s),function(n){a.d(s,"default",(function(){return c}));var t,p,o,e=a(0);class c extends e.a{inited(){n.hub&&n.hub.fire&&n.hub.fire("changed",{level:0,children:[{level:2,title:"PluginManager对象",hash:"pluginmanager%E5%AF%B9%E8%B1%A1",children:[{level:3,title:"1. 插件加载及定义",hash:"1.-%E6%8F%92%E4%BB%B6%E5%8A%A0%E8%BD%BD%E5%8F%8A%E5%AE%9A%E4%B9%89"},{level:3,title:"自定义视图插件与自定义路由插件",hash:"%E8%87%AA%E5%AE%9A%E4%B9%89%E8%A7%86%E5%9B%BE%E6%8F%92%E4%BB%B6%E4%B8%8E%E8%87%AA%E5%AE%9A%E4%B9%89%E8%B7%AF%E7%94%B1%E6%8F%92%E4%BB%B6"}]},{level:2,title:"2. 事件交互",hash:"2.-%E4%BA%8B%E4%BB%B6%E4%BA%A4%E4%BA%92",children:[{level:3,title:"prompts表单对象",hash:"prompts%E8%A1%A8%E5%8D%95%E5%AF%B9%E8%B1%A1"},{level:3,title:"插件action",hash:"%E6%8F%92%E4%BB%B6action"},{level:3,title:"插件事件钩子",hash:"%E6%8F%92%E4%BB%B6%E4%BA%8B%E4%BB%B6%E9%92%A9%E5%AD%90"},{level:3,title:"进程通讯ipc",hash:"%E8%BF%9B%E7%A8%8B%E9%80%9A%E8%AE%AFipc"},{level:3,title:"数据共享",hash:"%E6%95%B0%E6%8D%AE%E5%85%B1%E4%BA%AB"}]},{level:2,title:"3.持久存储db",hash:"3.%E6%8C%81%E4%B9%85%E5%AD%98%E5%82%A8db"},{level:2,title:"4.工具函数",hash:"4.%E5%B7%A5%E5%85%B7%E5%87%BD%E6%95%B0"},{level:2,title:"ClientAddon对象",hash:"clientaddon%E5%AF%B9%E8%B1%A1"}]})}}o={},(p="components")in(t=c)?Object.defineProperty(t,p,{value:o,enumerable:!0,configurable:!0,writable:!0}):t[p]=o}.call(this,a(2))}});