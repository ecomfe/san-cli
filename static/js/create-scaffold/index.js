!function(n){function s(s){for(var t,o,c=s[0],l=s[1],r=s[2],i=0,k=[];i<c.length;i++)o=c[i],Object.prototype.hasOwnProperty.call(p,o)&&p[o]&&k.push(p[o][0]),p[o]=0;for(t in l)Object.prototype.hasOwnProperty.call(l,t)&&(n[t]=l[t]);for(u&&u(s);k.length;)k.shift()();return e.push.apply(e,r||[]),a()}function a(){for(var n,s=0;s<e.length;s++){for(var a=e[s],t=!0,c=1;c<a.length;c++){var l=a[c];0!==p[l]&&(t=!1)}t&&(e.splice(s--,1),n=o(o.s=a[0]))}return n}var t={},p={10:0,52:0},e=[];function o(s){if(t[s])return t[s].exports;var a=t[s]={i:s,l:!1,exports:{}};return n[s].call(a.exports,a,a.exports,o),a.l=!0,a.exports}o.e=function(){return Promise.resolve()},o.m=n,o.c=t,o.d=function(n,s,a){o.o(n,s)||Object.defineProperty(n,s,{enumerable:!0,get:a})},o.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},o.t=function(n,s){if(1&s&&(n=o(n)),8&s)return n;if(4&s&&"object"==typeof n&&n&&n.__esModule)return n;var a=Object.create(null);if(o.r(a),Object.defineProperty(a,"default",{enumerable:!0,value:n}),2&s&&"string"!=typeof n)for(var t in n)o.d(a,t,function(s){return n[s]}.bind(null,t));return a},o.n=function(n){var s=n&&n.__esModule?function(){return n.default}:function(){return n};return o.d(s,"a",s),s},o.o=function(n,s){return Object.prototype.hasOwnProperty.call(n,s)},o.p="/san-cli/";var c=window.webpackJsonp=window.webpackJsonp||[],l=c.push.bind(c);c.push=s,c=c.slice();for(var r=0;r<c.length;r++)s(c[r]);var u=l;e.push([126,0]),a()}({126:function(n,s,a){var t=a(1),p=a(79),e=a(27).default;n.exports=a(27),n.exports.default=t(e,p,[])},27:function(n,s,a){"use strict";a.r(s),function(n){a.d(s,"default",(function(){return c}));var t,p,e,o=a(0);class c extends o.a{inited(){n.hub&&n.hub.fire&&n.hub.fire("changed",{level:0,children:[{level:2,title:"脚手架项目必备的基础目录结构",hash:"%E8%84%9A%E6%89%8B%E6%9E%B6%E9%A1%B9%E7%9B%AE%E5%BF%85%E5%A4%87%E7%9A%84%E5%9F%BA%E7%A1%80%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84"},{level:2,title:"meta.js/meta.json",hash:"meta.js%2Fmeta.json"},{level:2,title:"san.config.js",hash:"san.config.js"},{level:2,title:"相关 dot 文件",hash:"%E7%9B%B8%E5%85%B3-dot-%E6%96%87%E4%BB%B6"}]})}}e={},(p="components")in(t=c)?Object.defineProperty(t,p,{value:e,enumerable:!0,configurable:!0,writable:!0}):t[p]=e}.call(this,a(2))},79:function(n,s){n.exports=' <div class="content"><div class="markdown"><h1 id="%E5%A6%82%E4%BD%95%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E8%84%9A%E6%89%8B%E6%9E%B6%E9%A1%B9%E7%9B%AE"><a class="header-anchor" href="#%E5%A6%82%E4%BD%95%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E8%84%9A%E6%89%8B%E6%9E%B6%E9%A1%B9%E7%9B%AE">#</a> 如何创建一个脚手架项目</h1> <p>日常开发中，团队可以创建自己的项目脚手架，本文将介绍脚手架创建的方法。</p> <h2 id="%E8%84%9A%E6%89%8B%E6%9E%B6%E9%A1%B9%E7%9B%AE%E5%BF%85%E5%A4%87%E7%9A%84%E5%9F%BA%E7%A1%80%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84"><a class="header-anchor" href="#%E8%84%9A%E6%89%8B%E6%9E%B6%E9%A1%B9%E7%9B%AE%E5%BF%85%E5%A4%87%E7%9A%84%E5%9F%BA%E7%A1%80%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84">#</a> 脚手架项目必备的基础目录结构</h2> <pre class="language-text"><code class="language-text">├── template            # 模板目录结构\n│   ├── san.config.js   # cli配置项\n└── meta.js/meta.json   # 模板创建 prompt 交互问题</code></pre> <p>San CLI 使用 handlerbars 渲染 template 目录，所以脚手架请使用 handlerbars 语法。</p> <h2 id="meta.js%2Fmeta.json"><a class="header-anchor" href="#meta.js%2Fmeta.json">#</a> meta.js/meta.json</h2> <p>回答的内容会作为模板数据来处理文件</p> <h5 id="meta.js"><a class="header-anchor" href="#meta.js">#</a> meta.js</h5> <pre class="language-js"><code class="language-js"><span class="token comment">// meta 配置项</span>\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 生成器会将 handlerbars 语法填上 prompts 内容</span>\n    <span class="token comment">// 扩展 handlerbars helper</span>\n    helpers<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token comment">// 过滤满足 value 跳转的目录 key，不做生成处理</span>\n    filters<span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token string">\'mock/**\'</span><span class="token operator">:</span> <span class="token string">\'useMock\'</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token comment">// 脚手架交互问答</span>\n    prompts<span class="token operator">:</span> <span class="token punctuation">{</span>\n        name<span class="token operator">:</span> <span class="token punctuation">{</span>\n            type<span class="token operator">:</span> <span class="token string">\'string\'</span><span class="token punctuation">,</span>\n            required<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n            label<span class="token operator">:</span> <span class="token string">\'项目名称\'</span><span class="token punctuation">,</span>\n            <span class="token comment">// 默认 &#123;&#123;name}} 会被替换成init 命令的目录名</span>\n            <span class="token comment">// 类似还有username、email 等 git 配置</span>\n            <span class="token keyword">default</span><span class="token operator">:</span> <span class="token string">\'&#123;&#123;name}}\'</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        useMock<span class="token operator">:</span> <span class="token punctuation">{</span>\n            type<span class="token operator">:</span> <span class="token string">\'confirm\'</span><span class="token punctuation">,</span>\n            message<span class="token operator">:</span> <span class="token string">\'使用 mock 数据？\'</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h5 id="meta.json"><a class="header-anchor" href="#meta.json">#</a> meta.json</h5> <pre class="language-json"><code class="language-json"><span class="token punctuation">{</span>\n    <span class="token comment">// meta 配置项</span>\n<span class="token punctuation">}</span></code></pre> <h5 id="%E9%85%8D%E7%BD%AE%E9%A1%B9"><a class="header-anchor" href="#%E9%85%8D%E7%BD%AE%E9%A1%B9">#</a> 配置项</h5> <p><code>helpers</code> 自定义 handlerbars 的块级 helper，cli 会调用 registerHelper，处理这段自定义</p> <p><strong>例如</strong></p> <pre class="language-js"><code class="language-js"><span class="token comment">// meta.js</span>\n<span class="token punctuation">{</span>\n    helpers<span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token function-variable function">if_or</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">v1<span class="token punctuation">,</span> v2<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>v1 <span class="token operator">||</span> v2<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token keyword">return</span> options<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n            <span class="token keyword">return</span> options<span class="token punctuation">.</span><span class="token function">inverse</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre> <p><code>filters</code> 过滤满足 value 跳转的目录 key，不做渲染处理</p> <p><strong>例如</strong></p> <pre class="language-js"><code class="language-js"><span class="token comment">// meta.js</span>\n<span class="token punctuation">{</span>\n    filters<span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token string">\'mock/**\'</span><span class="token operator">:</span> <span class="token string">\'tplEngine!=="smarty"\'</span><span class="token punctuation">,</span>\n        <span class="token string">\'template/**\'</span><span class="token operator">:</span> <span class="token string">\'tplEngine!=="smarty"\'</span><span class="token punctuation">,</span>\n        <span class="token string">\'template/demo-store/**\'</span><span class="token operator">:</span> <span class="token string">\'!demo || (demo &amp;&amp; demoType!=="store")\'</span><span class="token punctuation">,</span>\n        <span class="token string">\'template/demo/**\'</span><span class="token operator">:</span> <span class="token string">\'!demo || (demo &amp;&amp; demoType!=="normal")\'</span><span class="token punctuation">,</span>\n        <span class="token string">\'src/pages/demo-store/**\'</span><span class="token operator">:</span> <span class="token string">\'!demo || (demo &amp;&amp; demoType!=="store")\'</span><span class="token punctuation">,</span>\n        <span class="token string">\'src/pages/demo/**\'</span><span class="token operator">:</span> <span class="token string">\'!demo || (demo &amp;&amp; demoType!=="normal")\'</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre> <p><code>prompts</code> 交互问答，key 为问题名称（string 类型），value 为问题配置项（Object 类型）</p> <p><strong>例如</strong></p> <pre class="language-js"><code class="language-js"><span class="token comment">// meta.js</span>\n<span class="token punctuation">{</span>\n    prompts<span class="token operator">:</span> <span class="token punctuation">{</span>\n        name<span class="token operator">:</span> <span class="token punctuation">{</span>\n            type<span class="token operator">:</span> <span class="token string">\'string\'</span><span class="token punctuation">,</span>\n            required<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n            label<span class="token operator">:</span> <span class="token string">\'项目名称\'</span><span class="token punctuation">,</span>\n            <span class="token keyword">default</span><span class="token operator">:</span> <span class="token string">\'&#123;&#123;name}}\'</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        tplEngine<span class="token operator">:</span> <span class="token punctuation">{</span>\n            type<span class="token operator">:</span> <span class="token string">\'select\'</span><span class="token punctuation">,</span>\n            message<span class="token operator">:</span> <span class="token string">\'选择模板引擎\'</span><span class="token punctuation">,</span>\n            choices<span class="token operator">:</span> <span class="token punctuation">[</span>\n                <span class="token punctuation">{</span>\n                    title<span class="token operator">:</span> <span class="token string">\'Smarty（百度内部）\'</span><span class="token punctuation">,</span>\n                    value<span class="token operator">:</span> <span class="token string">\'smarty\'</span>\n                <span class="token punctuation">}</span><span class="token punctuation">,</span>\n                <span class="token punctuation">{</span>\n                    title<span class="token operator">:</span> <span class="token string">\'纯 HTML\'</span><span class="token punctuation">,</span>\n                    value<span class="token operator">:</span> <span class="token string">\'html\'</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">]</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        demo<span class="token operator">:</span> <span class="token punctuation">{</span>\n            type<span class="token operator">:</span> <span class="token string">\'confirm\'</span><span class="token punctuation">,</span>\n            message<span class="token operator">:</span> <span class="token string">\'安装demo示例？\'</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        demoType<span class="token operator">:</span> <span class="token punctuation">{</span>\n            when<span class="token operator">:</span> <span class="token string">\'demo\'</span><span class="token punctuation">,</span>\n            type<span class="token operator">:</span> <span class="token string">\'select\'</span><span class="token punctuation">,</span>\n            message<span class="token operator">:</span> <span class="token string">\'选择示例代码类型：\'</span><span class="token punctuation">,</span>\n            choices<span class="token operator">:</span> <span class="token punctuation">[</span>\n                <span class="token punctuation">{</span>\n                    title<span class="token operator">:</span> <span class="token string">\'san-store (推荐)\'</span><span class="token punctuation">,</span>\n                    value<span class="token operator">:</span> <span class="token string">\'store\'</span>\n                <span class="token punctuation">}</span><span class="token punctuation">,</span>\n                <span class="token punctuation">{</span>\n                    title<span class="token operator">:</span> <span class="token string">\'normal\'</span><span class="token punctuation">,</span>\n                    value<span class="token operator">:</span> <span class="token string">\'normal\'</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">]</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre> <h2 id="san.config.js"><a class="header-anchor" href="#san.config.js">#</a> san.config.js</h2> <p>san.config.js 是 San-CLI 的配置文件，配置格式<a href="/san-cli/config/">参考</a></p> <h2 id="%E7%9B%B8%E5%85%B3-dot-%E6%96%87%E4%BB%B6"><a class="header-anchor" href="#%E7%9B%B8%E5%85%B3-dot-%E6%96%87%E4%BB%B6">#</a> 相关 dot 文件</h2> <p>模板中的<code>_xxx</code>文件会在安装之后，转换成<code>.xxx</code>文件，例如<code>template/_babelrc</code>经过<code>san init</code>之后，会变成<code>.babelrc</code>。</p> <p>常见 dot 文件：</p> <ul> <li>babelrc：babel 配置</li> <li>editorconfig：常见规范类的配置</li> <li>npmrc：npm 配置</li> <li>prettierrc：格式化插件</li> <li>gitignore：git 忽略</li> <li>fecsrc：fecs 格式化配置</li> </ul> </div></div> '}});